// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É (–§—ñ—à–µ—Ä–∞‚Äì–Ñ–π—Ç—Å–∞)
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–º—ñ–Ω–Ω–∏—Ö
let allWords = shuffleArray([...WORDS_A1_2]);
let currentSet = [];
let currentSetSize = 10;
let currentWordIndex = 0;
let correctAnswers = 0;
let wrongAnswers = 0;
let wordVisible = true;
let roundCorrect = 0;
let roundWrong = 0;

// DOM –µ–ª–µ–º–µ–Ω—Ç–∏
const wordElement = document.getElementById("word");
const optionsElement = document.getElementById("options");
const scoreElement = document.getElementById("score");
const resultElement = document.getElementById("result");
const restartButton = document.getElementById("restart");
const showWordCheckbox = document.getElementById("showWordCheckbox");
const listenButton = document.getElementById("listenButton");
const autoSpeakCheckbox = document.getElementById("autoSpeakCheckbox");

// –û–∑–≤—É—á–µ–Ω–Ω—è
function speakWord(text) {
  if ("speechSynthesis" in window) {
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.lang = "en-US";
    window.speechSynthesis.cancel();
    window.speechSynthesis.speak(utterance);
  }
}

// –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
function saveProgress() {
  const progress = {
    allWords,
    currentSet,
    currentSetSize,
    currentWordIndex,
    correctAnswers,
    wrongAnswers,
    roundCorrect,
    roundWrong,
    wordVisible
  };
  localStorage.setItem("gameProgress", JSON.stringify(progress));
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
function loadProgress() {
  const saved = localStorage.getItem("gameProgress");
  if (saved) {
    const p = JSON.parse(saved);
    allWords = p.allWords;
    currentSet = p.currentSet;
    currentSetSize = p.currentSetSize;
    currentWordIndex = p.currentWordIndex;
    correctAnswers = p.correctAnswers;
    wrongAnswers = p.wrongAnswers;
    roundCorrect = p.roundCorrect;
    roundWrong = p.roundWrong;
    wordVisible = p.wordVisible;

    scoreElement.textContent = `–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: ${correctAnswers} | –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: ${wrongAnswers}`;
    showWordCheckbox.checked = wordVisible;
    showWord();
    return true;
  }
  return false;
}

// –ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–∞—É–Ω–¥
function startRound() {
  if (allWords.length === 0) {
    endGame();
    return;
  }

  currentSet = allWords.slice(0, currentSetSize);
  currentSet = shuffleArray(currentSet);
  currentWordIndex = 0;
  roundCorrect = 0;
  roundWrong = 0;
  showWord();
}

// –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ª–æ–≤–æ
function showWord() {
  if (currentWordIndex >= currentSet.length) {
    endRound();
    return;
  }

  const currentWord = currentSet[currentWordIndex];
  wordElement.textContent = wordVisible ? currentWord.en : "*******";

  if (autoSpeakCheckbox.checked) speakWord(currentWord.en);

  let options = [currentWord.uk];
  let used = new Set([allWords.indexOf(currentWord)]);
  while (options.length < 4) {
    const i = Math.floor(Math.random() * allWords.length);
    if (!used.has(i)) {
      options.push(allWords[i].uk);
      used.add(i);
    }
  }

  options = shuffleArray(options);
  optionsElement.innerHTML = "";

  options.forEach(option => {
    const btn = document.createElement("button");
    btn.textContent = option;
    btn.classList.add("option-btn");
    btn.addEventListener("click", () => checkAnswer(option, currentWord.uk, btn));
    optionsElement.appendChild(btn);
  });

  saveProgress();
}

// –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
function checkAnswer(selected, correct, btn) {
  const buttons = document.querySelectorAll(".option-btn");
  if (selected === correct) {
    btn.classList.add("correct");
    correctAnswers++;
    roundCorrect++;
  } else {
    btn.classList.add("wrong");
    wrongAnswers++;
    roundWrong++;
    buttons.forEach(b => {
      if (b.textContent === correct) b.classList.add("correct");
    });
  }

  scoreElement.textContent = `–ü—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: ${correctAnswers} | –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö: ${wrongAnswers}`;
  currentWordIndex++;
  saveProgress();

  setTimeout(showWord, 1000);
}

// –ö—ñ–Ω–µ—Ü—å —Ä–∞—É–Ω–¥—É
function endRound() {
  if (roundWrong === 0) {
    currentSetSize++;
    resultElement.textContent = `‚úÖ –£—Å—ñ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ! –î–æ–¥–∞—î–º–æ +1 —Å–ª–æ–≤–æ (${currentSetSize})`;
    allWords.splice(0, currentSetSize - 1);
  } else {
    resultElement.textContent = `üîÅ –Ñ –ø–æ–º–∏–ª–∫–∏ (${roundWrong}). –ü–æ–≤—Ç–æ—Ä—é—î–º–æ —Ç—ñ –∂ —Å–ª–æ–≤–∞.`;
  }

  saveProgress();
  setTimeout(startRound, 2000);
}

// üéÅ –ö—ñ–Ω–µ—Ü—å –≥—Ä–∏ ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –∞–±–∑–∞—Ü –∫–Ω–∏–≥–∏
function endGame() {
  wordElement.textContent = "üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –ø–µ—Ä–µ–∫–ª–∞–ª–∏ –≤—Å—ñ —Å–ª–æ–≤–∞!";
  optionsElement.innerHTML = "";
  scoreElement.textContent = `‚úÖ –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${correctAnswers} –ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö, ${wrongAnswers} –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏—Ö.`;

  const paragraph = `
  ‚ÄúYou don‚Äôt know about me without you have read a book by the name of The Adventures of Tom Sawyer;
  but that ain‚Äôt no matter. That book was made by Mr. Mark Twain, and he told the truth, mainly.
  There was things which he stretched, but mainly he told the truth. That is nothing.
  I never seen anybody but lied one time or another, without it was Aunt Polly, or the widow,
  or maybe Mary. Aunt Polly‚ÄîTom‚Äôs Aunt Polly, she is‚Äîand Mary, and the Widow Douglas is all told
  about in that book, which is mostly a true book, with some stretchers, as I said before.‚Äù`;

  resultElement.innerHTML = `
    <div class="gift-box">
      <h2>üéÅ –ü–æ–¥–∞—Ä—É–Ω–æ–∫:</h2>
      <p class="gift-text">${paragraph}</p>
    </div>
  `;

  // –û–∑–≤—É—á–∫–∞ –∞–±–∑–∞—Ü—É
  speakWord("You don't know about me without you have read a book by the name of The Adventures of Tom Sawyer...");

  localStorage.removeItem("gameProgress");
}

// –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
showWordCheckbox.addEventListener("change", () => {
  wordVisible = showWordCheckbox.checked;
  const current = currentSet[currentWordIndex];
  if (current) wordElement.textContent = wordVisible ? current.en : "*******";
  saveProgress();
});

listenButton.addEventListener("click", () => {
  const current = currentSet[currentWordIndex];
  if (current) speakWord(current.en);
});

restartButton.addEventListener("click", () => {
  localStorage.removeItem("gameProgress");
  allWords = shuffleArray([...WORDS_A1_2]);
  currentSetSize = 10;
  correctAnswers = 0;
  wrongAnswers = 0;
  resultElement.textContent = "";
  scoreElement.textContent = "";
  startRound();
});

// –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
showWordCheckbox.checked = true;
wordVisible = true;

if (!loadProgress()) startRound();
